@startuml API
top to bottom direction
UserLoginController o-- IUserManager
UserLoginController --> UserLogin
class UserLoginController{
    -_logger {readonly} : ILogger<UserLoginController>
    -_userManager {readonly} : IUserManager
    +UserLoginController(logger : ILogger<UserLoginController>, userManger : IUserManager)
    +LoginUser(user : UserLogin) : Task<IActionResult>
}

UserTokenController o-- IUserManager
UserTokenController o-- ITokenManager
UserTokenController --> UserToken
class UserTokenController{
    -_logger {readonly} : ILogger<UserTokenController>
    -_userManager {readonly} : IUserManager
    -_tokenManager {readonly} : ITokenManager <UserToken>
    +UserTokenController(logger : ILogger<UserTokenController>, userManger : IUserManager, tokenManager : ITokenManager <UserToken>)
    +ValidateToken(token : string) : Task<IActionResult>
}

UserCreationController o-- IUserManager
UserCreationController o-- IHomeManager
UserCreationController o-- ITokenManager
UserCreationController --> UserToken
UserCreationController --> UserCreate
class UserCreationController{
    -_logger{readonly} : ILogger<UserCreationController>
    -_userManager{readonly} : IUserManager
    -_homeManager {readonly} : IHomeManager
    -_tokenManager {readonly} : ITokenManager<UserToken>
    +UserCreationController(logger : ILogger<UserCreationController>, userManager : IUserManager, homeManager : IHomeManager, tokenManager : ITokenManager <UserToken>)
    +CreateUser(userCreateInfo : UserCreate) : Task<ActionResult<UserToken>>
}

UserController --> User
UserController o-- IUserManager
class UserController{
    -_logger{readonly} : ILogger<UserController>
    -_userManager{readonly} : IUserManager
    +UserController(logger : ILogger<UserController>, userManager : IUserManager)
    +GetUserById(id : int) : Task<ActionResult<User>>
}

HubController --> Hub
HubController o-- IHubManager
class HubController{
    -_logger{readonly} : ILogger<HubController>
    -_hubManager{readonly} : IHubManager
    +HubController(logger : ILogger<HubController>, hubManager : IHubManager)
    +GetHubById(id : int) : Task<ActionResult<Hub>>
    +GetHubsByHomeId(homeId : int) : Task<ActionResult<List<Hub>>>
    +GetHubsByUserId(userId : int) : Task<ActionResult<List<Hub>>>

}
HubCreationController --> HubCreate
HubCreationController --> Hub
HubCreationController o-- IHubManager
class HubCreationController{
    -_logger{readonly} : ILogger<HubCreationController>
    -_hubManager{readonly} : IHubManager
    +HubCreationController(logger : ILogger<HubCreationController>, hubManager : IHubManager)
    +CreateHub(hubCreateInfo : HubCreate) : Task<ActionResult<Hub>>
}

HomeCreationController --> HomeCreate
HomeCreationController o-- IHomeManager
HomeCreationController --> Home
class HomeCreationController{
    -_logger{readonly} : ILogger<HomeCreationController>
    -_homeManager{readonly} : IHomeManager
    +HomeCreationController(logger : ILogger<HomeCreationController>, homeManager: IHomeManager)
    +CreateHome(homeCreateInfo HomeCreate, userId : int) : Task<ActionResult<Home>>
}

HomeController o-- IHomeManager
HomeController --> Home
class HomeController{
    -_logger{readonly} : ILogger<HomeController>
    -_homeManager{readonly} : IHomeManager
    +HomeController(logger : ILogger<HomeController>, homeManager: IHomeManager)
    +GetHomeById(id : int) : Task<ActionResult<Home>>
}

IUserManager --> UserCreate
IUserManager --> User
IUserManager --> UserLogin
IUserManager --> UserCredentials
interface IUserManager{
    +CreateUser(userCreate : UserCreate) : Task<User>
    +GetUserById(id : int) : Task<User>
    +GetUserCredentialsByUsername(username : string) : Task<UserCredentials>
    +GetNewUserToken(user : UserLogin) : Task<string>
}

UserManager ..|> IUserManager
UserManager o-- IUserProvider
UserManager o-- ITokenManager
UserManager o-- IPasswordHasher
class UserManager{
    -_userProvider : IUserProvider
    -_tokenManager{readonly} : ITokenManager<UserToken>
    -_passwordHasher : IPasswordHasher
    +UserManager(userProvider : IUserProvider, passwordHasher : IPasswordHasher, tokenManager : ITokenManager<UserToken>)
    -ValidateCredentials(validUser : UserCredentials, user UserLogin) : bool
    -MatchPassword(validUser : UserCredentials, user UserLogin) : bool
}
IUserProvider --> UserDb
interface IUserProvider{
    +CreateUser(dataArray : Dictionary<string, string>) : Task<UserDb>
    +GetUserById(id : int) : Task<UserDb>
    +GetUserByUsername(username : string) : Task<UserDb>
}

ITokenManager --> User
ITokenManager --> TToken
interface ITokenManager<TToken> {
    +GenerateToken(user User) : Task<TToken>
    +ValidateToken(token : string) : Task<bool>
    +FromTokenString(token : string) : Task <TToken>
}
TokenManager ..|> ITokenManager
TokenManager --> UserToken
class TokenManager<UserToken> {
    -_configuration{readonly} : IConfiguration
    -_secret{readonly} : string
    +TokenManager(configuration : IConfiguration)
    +GetPrincipal(token : string) : ClaimsPrincipal
}

IHubManager --> HubCreate
IHubManager --> Hub
interface IHubManager{
    +CreateHub(hubCreate : HubCreate) : Task<Hub>
    +GetHubById(id : int) : Task<Hub>
    +GetHubsByHomeId(homeId : int) : Task<List<Hub>>
    +GetHubsByUserId(userId : int) : Task<List<Hub>>
}

HubManager ..|> IHubManager
HubManager o-- IHubProvider
class HubManager {
    -_hubProvider{readonly} : IHubProvider
    +HubManager(hubProvider : IHubProvider)
}

IHubProvider --> HubDb
interface IHubProvider{
    +CreateHub(dataArray : Dictionary<string,string>) : Task<HubDb>
    +GetHubById(id : int) : Task<HubDb>
    +GetHubsByHomeId(homeId : int) : Task<HubDb>
    +GetHubsByUserId(userId : int) : Task<HubDb>
}

IHomeManager --> HomeCreate
IHomeManager --> Home
IHomeManager --> RelateObject
interface IHomeManager{
    +CreateHome(homeCreate : HomeCreate, userId : int) : Task<Home>
    +GetHomeById(id : int) : Task<Home>
    +RelateUserToHome(userId : int, homeId : int) : Task<RelateObject>
}


IHomeProvider --> HomeDb
IHomeProvider --> RelateObject
interface IHomeProvider{
    +CreateHome(dataArray : Dictionary<string, string>) : Task<HomeDb>
    +GetHomeById(id : int) : Task<HomeDb>
    +RelateUserToHome(userId : int, homeId : int) : Task<RelateObject>
}
HomeProvider o-- ISurrealDbProvider
HomeProvider ..|> IHomeProvider
class HomeProvider{
    -_dbProvider : ISurrealDbProvider
    +HomeProvider(dbProvider : ISurrealDbProvider)
}

HubProvider o-- ISurrealDbProvider
HubProvider ..|> IHubProvider
class HubProvider{
    -_dbProvider : ISurrealDbProvider
    +HubProvider(dbProvider : ISurrealDbProvider)
}
UserProvider o-- ISurrealDbProvider
UserProvider ..|> IUserProvider
class UserProvider{
    -_dbProvider : ISurrealDbProvider
    +UserProvider(dbProvider : ISurrealDbProvider)
}
HomeManager o-- IHomeProvider
HomeManager ..|> IHomeManager
class HomeManager{
    -_homeProvider : IHomeProvider
    +HomeManager(homeProvider : IHomeProvider)
}

interface IPasswordHasher{
    +GenerateSalt() : byte[]
    +SaltToString(salt : byte[]) : string
    +HashPassword(password : string, salt : byte[]) : string
}
ISurrealDbProvider --> SurrealDbResult
ISurrealDbProvider --> RelateObject
interface ISurrealDbProvider{
    +MakeRawResult(sqlString : string) : Task<SurrealDbResult>
    +Create<T>(tableName : string, dataArray : Dictionary<string, string>) where T : new()
    +Relate(fromId : string, toId : string, byName : string) : Task<RelateObject>
    +GetNextId(tableName : string) : Task<int>
    +GetOneById<T>(tableName : string, id : int) : Task<T>
    +GetRelation(subjectId : string, relationName : string, alias : string) : Task<RelateObject>
    +GetOneFromInsideAnother<T>(tableName : string, baseTable : string, targetId : string) : Task<List<T>>
    +GetOneFromInsideARelation<T>(tableName : string, baseTable : string, relationTable : string, targetId : string) : Task<List<T>>
    +GetOneByField<T>(tableName : string, field : string, value : string) : Task<T>
}

class UserLogin
{
    +Username : string
    +Password : string
}

UserToken --|> User
class UserToken{
    +Token : string
}

class User {
    +Id : int
    +UserName : string
    +Email : string
    +FirstName : string
    +LastName : string
}

UserCredentials --|> User
class UserCredentials{
    +Salt : string
    +HashedPassword : string
}

class UserCreate{
    +UserName : string
    +Password : string
    +Email : string
    +FirstName : string
    +LastName : string
}
UserDb o--> User
UserDb o--> UserCredentials
class UserDb{
    +id : string
    +email : string
    +firstname : string
    +lastname : string
    +username : string
    +HashedPassword : string
    +salt : string
    +ConvertToUser() : User
    +ConvertToUserCredentials() : UserCredentials
}

class Hub {
    +Id : int
    +Name: string
    +Mac : string
    +Home : string
    +PrivateAddress : string
    +PublicAddress : string
}
class HubCreate{
    +Name: string
    +Mac : string
    +Home : string
    +PrivateAddress : string
    +PublicAddress : string
}
HubDb o--> Hub
class HubDb{
    +id : string
    +name : string
    +mac : string
    +home : string
    +private_addr : string
    +public_addr : string
    +ConverToHub() : Hub
}
class HomeCreate{
    +Name: string
}
HomeDb o--> Home
class HomeDb{
    +id : string
    +name : string
    +ConvertToHome() : Home
}
class Home{
    +Id : int
    +Name: string
}
class RelateObject{
    +Id : string
    +In : string
    +Out : string
    +RelateObject(Id : string, In : string, Out : string)
}
class SurrealDbResult{
    +time : string
    +status : string
    +result : List<object>
}
@enduml