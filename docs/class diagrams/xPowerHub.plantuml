@startuml XPowerHub

interface IMessageAction {
    +Action(clientId : string, topic : string, payload : string) : void
    +CanExecute(clientId : string, topic : string, payload : string) : bool
}

interface IServerHandler {
    +MessageEventHandler {+get; +set;} : Action<string, string, string>
    +StartAsync() : Task
    +PublishAsync(topic : string, payload : string) : Task
    +StopAsync() : Task
}

class MqttServerHandler {
    +ServerId {+get; -set} : string
    +MessageEventHandler {+get; +set} : Action<string, string, string>
    -mqttServer {readonly} : MqttServer
    +MqttServerHandler(mqttServer : MqttServer)
    -OnMessageNotConsumedAsync(packet : ApplicationMessageNotConsumedEventArgs) : Task
}

class ServerController {
    +Actions {+get; +set;} : list<IMessageAction>
    -serverHandler {readonly} : IServerHandler
    +ServerController(actions : list<IMessageAction>, serverHandler : IServerHandler)
    -OnMessageReceived(clientId : string, topic : string, payload : string) : void
}

class IDeviceManager{
    +GetDevices() : List<Device>
    +GetStatusDevices() : List<DeviceStatusResponse>
}

class RequestStatusAction {

}

class Device{
    +ClientId : string
    +StatusId : DeviceStatusType
    +TypeId : DeviceType
    +MacAdress : string
}
class DeviceStatusResponse{
    +Device : Device
    +Data : object
}
class SocketData{
    +TurnedOn : bool
}
enum DeviceStatus{
    Unknown : 0
    TurnedOff : 1
    TurnedOn : 2
    ConnectedToHub : 3
}

enum DeviceType{
    Hub : 0
    Socket : 1
}

MqttServerHandler ..|> IServerHandler
ServerController o.. IServerHandler
ServerController o.. IMessageAction

RequestStatusAction ..|> IMessageAction
RequestStatusAction o-- IServerHandler
RequestStatusAction o-- IDeviceManager


IDeviceManager *-- DeviceStatusResponse
DeviceStatusResponse *-- Device
Device <|-- DeviceStatus
Device <|-- DeviceType



@enduml