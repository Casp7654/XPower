@startuml Webclient

note "SocketDeviceRequestConverter will not have implementations shown\nMqttService is a third party library\nDto's will not be shown in this diagram." as n1

interface IoTDevice {
    +name: string
    +status: boolean
    +mac_address: string
}

class Device {
    +id: string
    +name: string
}

class HubDevice {
}

class SocketDevice {
    +turned_on: boolean
    +group: string
    +parent: IoTDevice
}

class IoTService {
    +GetSocketDevicesFromHub(hubIdenfitifer : string) : void
    +GetDevices() : Array<IoTDevice>
    -GetFilteredDevices<T extends IoTDevice>(type: T) : Array<T>
    -GetDeviceById(clientId: string) : IoTDevice
    -OnSocketStatusResponse(status: DeviceStatusResponse<SocketDeviceStatus>) : void
    -OnIoTStatusResponse(message: string) : void
}

class MqttClientService {
  -client: MqttService

  +Publish(target: string, data: string) : void
  +Subscribe(target: string, onMessageFunc: (message : string) : void) : void
  -CreateOptions() : IMqttServiceOptions
}

class SocketDeviceService {
  -requestConverter: SocketDeviceRequestConverter
  -mqttService {readonly}: MqttClientService

  +SocketDeviceService(mqttService: MqttClientService) 
  +TurnOff(target: string) : void
  +TurnOn(target: string) : void
}

interface SocketDeviceRequestConverter {
    +TurnOn() : string
    +TurnOff() : string
}

class HubSearcherComponent{
    -ssid : string
    -passphrase : string
    -device : any

    +HubSearcherComponent(_zone: NgZone, _hubConnService: HubConnServiceService) : void
    +Connected(value: BluetoothRemoteGATTCharacteristic) void
    +Connect() : void
    +SelectDevice() : void
    +Sendinput() : void
    -OnSsidKey(event : any) : void
    -OnPassPhraseKey(event: any) : void
}

class HubConnServiceService{
    GATT_CHARACTERISTIC_CONNECTION : string
    GATT_PRIMARY_SERVICE : string
    character : any

    HubConnServiceService(ble: BluetoothCore)
    getCharConnect() : BluetoothRemoteGATTCharacteristic
    getCharacter() : BluetoothRemoteGATTCharacteristic
    getDevice() : BluetoothDevice
}

class User{
    +username : string
    +password : string
    +email : string
    +firstName : string
    +lastName : string
}

class UserToken{
    +token : string
}

class UserRegisterService{
    +CreateUser(user : User) : UserToken
    +SaveCreatedUser(createdUser : UserToken) : void
}

class AuthguardService {

  AuthguardService(http: HttpClient)

  +CanActivate(): bool

  +HasToken() : bool

}

class HubService {

  -hubDevices: List<HubDevice>

  +GetHubDevicesFromGroup(group_idenfitifer: string) : void
  +GetDevices() : List<HubDevice>
  +GetFilteredDevices<T>(type:T) : List<T>
}

class UserLoginService {

  +UserLoginService(private http: HttpClient)

  +ValidateLoginUser(userLogin: UserLogin): Observable<UserToken>
  +SaveLoggedinUser(loggedinUser: UserToken) : void
}

class UserLogoutService {

  +logoutUser() : boolean
}

UserToken --|> User
UserToken <-- UserRegisterService
HubDevice ..> IoTDevice
SocketDevice ..> IoTDevice
SocketDeviceService *-- SocketDeviceRequestConverter
SocketDeviceService o-- MqttClientService
IoTService -- IoTDevice
HubSearcherComponent *-- HubConnServiceService

IoTService o-- MqttClientService

@enduml